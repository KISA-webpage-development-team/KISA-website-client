"use client";

import { useSession } from "next-auth/react";
import dynamic from "next/dynamic";
import React, { useState, useEffect } from "react";
import "react-quill/dist/quill.snow.css";
import NotLoginModal from "../shared/NotLoginModal";
import { getIsAdmin } from "../../service/user";
import { createPost, updatePost } from "../../service/post";
import { useRouter } from "next/navigation";
import { reactQuillModule } from "../../config/reactQuillModule";

// need to import react quill dynamically to load style properly
const ReactQuill = dynamic(() => import("react-quill"), { ssr: false });

export default function Editor({ boardType, curPost = null, mode = "create" }) {
  // if curPost is not null, then it is update mode

  // get user session
  const { data: session, status } = useSession();
  // router
  const router = useRouter();

  const [title, setTitle] = useState(curPost?.title || ""); // post title
  const [content, setContent] = useState(curPost?.text || ""); // post content
  const [isAnnouncement, setIsAnnouncement] = useState(
    curPost?.isAnnouncement || false
  ); // 공지사항인지

  const [isAdmin, setIsAdmin] = useState(false); // admin인지

  // check if user is admin
  useEffect(() => {
    const fetchIsAdmin = async () => {
      try {
        const res = await getIsAdmin(session?.user.email);
        setIsAdmin(res);
      } catch (error) {
        console.log(error);
      }
    };

    fetchIsAdmin();
  }, [session]);

  const handleTitleChange = (e) => {
    setTitle(e.currentTarget.value);
  };

  const handleCheckboxChange = (e) => {
    setIsAnnouncement(e.currentTarget.checked);
  };

  const handleSumbit = async () => {
    // no need to submit date to server
    // `created` will be generated by server

    // image에 대한 최적화 작업이 필요함
    // 이때 AWS의 S3 bucket과 SDN 캐시서브스인 CloudFront를 써야함
    // 보류
    // https://velog.io/@stakbucks/React-Quill-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-2

    if (mode === "update") {
      // send update api call instead of create call
      try {
        const newData = {
          title,
          text: content,
          isAnnouncement,
        };

        console.log("New Partial Data submit!: ", newData);

        const res = await updatePost(curPost.postid, newData);
        if (res) {
          console.log("Post updated!");
        }

        router.push(`/posts/${curPost.postid}`);
      } catch (err) {
        console.log(err);
        return;
        f;
        // change it to error notification modal later
      }
    } else {
      try {
        const data = {
          type: boardType,
          title,
          fullname: session?.user.name,
          email: session?.user.email,
          text: content,
          isAnnouncement,
        };

        console.log("Data submit!: ", data);

        // do some api call
        const res = await createPost(data);
        if (res) {
          console.log("Post created!");
        }

        // redirect to a new post page
        router.push(`/boards/${boardType}`);
      } catch (error) {
        console.log(error);
        // change it to error notification modal late
      }
    }
  };

  if (status === "unauthenticated") {
    // force user to login
    return <NotLoginModal />;
  }

  return (
    <>
      <div className="flex flex-col grow">
        {/* Title Input */}
        <div className="flex items-center pb-1">
          <label htmlFor="title">제목</label>
          <input
            className="ml-2 border-2 border-gray-300 w-1/2 md:w-1/4 px-1"
            id="title"
            type="text"
            value={mode === "update" ? title : null}
            onChange={handleTitleChange}
          />
        </div>

        {/* Text Editor */}
        {mode === "create" ? (
          <ReactQuill
            theme="snow"
            style={{ height: "100%" }}
            modules={reactQuillModule}
            onChange={setContent}
          />
        ) : (
          <ReactQuill
            theme="snow"
            style={{ height: "100%" }}
            modules={reactQuillModule}
            value={content}
            onChange={setContent}
          />
        )}
      </div>

      {/* 공지사항 checkbox: user가 admin일때만 */}
      {isAdmin && (
        <div className="flex items-center mt-12">
          <input
            type="checkbox"
            checked={isAnnouncement}
            onChange={handleCheckboxChange}
          />
          <label className="ml-2" htmlFor="announcement">
            공지사항
          </label>
        </div>
      )}

      {/* Submit Button */}
      <div className={`flex justify-end ${!isAdmin && "mt-12"}`}>
        <button
          className="w-1/4 h-10 bg-blue-500 hover:bg-blue-400 text-white 
      rounded-md cursor-pointer"
          onClick={handleSumbit}
        >
          등록
        </button>
      </div>
    </>
  );
}
